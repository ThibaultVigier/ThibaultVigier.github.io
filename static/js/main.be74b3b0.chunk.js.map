{"version":3,"sources":["img/me.png","hooks/useWindowSize.js","constants/socialButtons.js","components/SocialButton.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","getSize","innerHeight","window","innerWidth","outerHeight","outerWidth","useWindowSize","_useState","useState","_useState2","Object","slicedToArray","windowSize","setWindowSize","handleResize","useEffect","addEventListener","removeEventListener","socialButtons","label","link","color","style","minWidth","SocialButton","_ref","react_default","a","createElement","Button","as","target","href","SocialButtonGroup","map","button","SocialButton_SocialButton","assign","key","concat","Home","_useWindowSize","width","height","Grid","columns","centered","verticalAlign","minHeight","Column","Segment","basic","textAlign","Image","src","meBitmoji","alt","circular","size","Header","Subheader","components_SocialButton","App","components_Home","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4JCElCC,EAAU,WACd,MAAO,CACLC,YAAaC,OAAOD,YACpBE,WAAYD,OAAOC,WACnBC,YAAaF,OAAOE,YACpBC,WAAYH,OAAOG,aAqBRC,EAjBO,WAAM,IAAAC,EACQC,mBAASR,KADjBS,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACrBK,EADqBH,EAAA,GACTI,EADSJ,EAAA,GAGpBK,EAAe,WACnBD,EAAcb,MAUhB,OAPAe,oBAAU,WAER,OADAb,OAAOc,iBAAiB,SAAUF,GAC3B,WACLZ,OAAOe,oBAAoB,SAAUH,KAEtC,IAEIF,kECzBHM,EAAgB,CACpB,CACEC,MAAO,SACPC,KAAM,oCACNC,MAAO,SAET,CACEF,MAAO,WACPC,KAAM,+CACNC,MAAO,aCLLC,EAAQ,CAAEC,SAAU,SAEpBC,EAAe,SAAAC,GAA4B,IAAzBN,EAAyBM,EAAzBN,MAAOC,EAAkBK,EAAlBL,KAAMC,EAAYI,EAAZJ,MACnC,OACEK,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,GAAG,IAAIC,OAAO,MAAMC,KAAMZ,EAAMC,MAAOA,EAAOC,MAAOA,GAC1DH,IAeQc,EAVW,WACxB,OACEP,EAAAC,EAAAC,cAAA,WACGV,EAAcgB,IAAI,SAAAC,GAAM,OACvBT,EAAAC,EAAAC,cAACQ,EAAD1B,OAAA2B,OAAA,CAAcC,IAAG,iBAAAC,OAAmBJ,EAAOhB,QAAagB,QC0BjDK,EAnCF,WAAM,IAAAC,EACmBnC,IAA5BL,EADSwC,EACTxC,YAAaE,EADJsC,EACItC,WAEfuC,EAAQvC,EANC,IAMuBA,EANvB,IAOTwC,EAAS1C,EANC,IAMyBA,EANzB,IAQhB,OACEyB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CACEC,QAAS,EACTC,UAAQ,EACRC,cAAc,SACdzB,MAAO,CAAEqB,SAAQD,QAAOM,UAbZ,IAauBzB,SAdxB,MAgBXG,EAAAC,EAAAC,cAACgB,EAAA,EAAKK,OAAN,KACEvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAASC,OAAK,EAACC,UAAU,UACvB1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CACEC,IAAKC,IACLC,IAAI,kBACJC,UAAQ,EACRX,UAAQ,EACRY,KAAK,WAEPhC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAQ7B,GAAG,MAAX,2BAEEJ,EAAAC,EAAAC,cAAC+B,EAAA,EAAOC,UAAR,kDAIFlC,EAAAC,EAAAC,cAACiC,EAAD,UChCKC,EAFH,kBAAMpC,EAAAC,EAAAC,cAACmC,EAAD,cCSEC,QACW,cAA7B9D,OAAO+D,SAASC,UAEe,UAA7BhE,OAAO+D,SAASC,UAEhBhE,OAAO+D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.be74b3b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/me.3e7feb31.png\";","import { useState, useEffect } from 'react';\n\nconst getSize = () => {\n  return {\n    innerHeight: window.innerHeight,\n    innerWidth: window.innerWidth,\n    outerHeight: window.outerHeight,\n    outerWidth: window.outerWidth\n  };\n};\n\nconst useWindowSize = () => {\n  let [windowSize, setWindowSize] = useState(getSize());\n\n  const handleResize = () => {\n    setWindowSize(getSize());\n  };\n\n  useEffect(() => {\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return windowSize;\n};\n\nexport default useWindowSize;\nexport { getSize };\n","const socialButtons = [\n  {\n    label: 'Github',\n    link: 'https://github.com/thibaultvigier',\n    color: 'black'\n  },\n  {\n    label: 'LinkedIn',\n    link: ' https://www.linkedin.com/in/thibaultvigier/',\n    color: 'linkedin'\n  }\n];\n\nexport { socialButtons };\n","import React from 'react';\nimport { Button } from 'semantic-ui-react';\nimport { socialButtons } from '../constants/socialButtons';\n\nconst style = { minWidth: '100px' };\n\nconst SocialButton = ({ label, link, color }) => {\n  return (\n    <Button as=\"a\" target=\"new\" href={link} color={color} style={style}>\n      {label}\n    </Button>\n  );\n};\n\nconst SocialButtonGroup = () => {\n  return (\n    <div>\n      {socialButtons.map(button => (\n        <SocialButton key={`social-button-${button.label}`} {...button} />\n      ))}\n    </div>\n  );\n};\n\nexport default SocialButtonGroup;\nexport { SocialButton };\n","import React from 'react';\nimport useWindowSize from '../hooks/useWindowSize';\nimport meBitmoji from '../img/me.png';\nimport { Header, Grid, Segment, Image } from 'semantic-ui-react';\nimport SocialButtonGroup from './SocialButton';\n\nconst minWidth = 400;\nconst minHeight = 640;\n\nconst Home = () => {\n  const { innerHeight, innerWidth } = useWindowSize();\n\n  const width = innerWidth > minWidth ? innerWidth : minWidth;\n  const height = innerHeight > minHeight ? innerHeight : minHeight;\n\n  return (\n    <Grid\n      columns={1}\n      centered\n      verticalAlign=\"middle\"\n      style={{ height, width, minHeight, minWidth }}\n    >\n      <Grid.Column>\n        <Segment basic textAlign=\"center\">\n          <Image\n            src={meBitmoji}\n            alt=\"me as a bitmoji\"\n            circular\n            centered\n            size=\"medium\"\n          />\n          <Header as=\"h1\">\n            Hi, my name is Thibault!\n            <Header.Subheader>\n              Fullstack Engineer - Python / JavaScript\n            </Header.Subheader>\n          </Header>\n          <SocialButtonGroup />\n        </Segment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport Home from './components/Home';\n\nconst App = () => <Home />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}