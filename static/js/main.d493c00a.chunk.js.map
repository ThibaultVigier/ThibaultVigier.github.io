{"version":3,"sources":["img/me.png","hooks/useWindowSize.js","constants/socialButtons.js","components/SocialButton.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getSize","innerHeight","window","innerWidth","outerHeight","outerWidth","useWindowSize","useState","windowSize","setWindowSize","handleResize","useEffect","addEventListener","removeEventListener","socialButtons","label","link","color","style","minWidth","SocialButton","Button","as","target","href","SocialButtonGroup","map","button","key","Home","width","height","Grid","columns","centered","verticalAlign","minHeight","Column","Segment","basic","textAlign","Image","src","meBitmoji","alt","circular","size","Header","Subheader","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d493c00a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/me.3e7feb31.png\";","import { useState, useEffect } from 'react';\n\nconst getSize = () => {\n  return {\n    innerHeight: window.innerHeight,\n    innerWidth: window.innerWidth,\n    outerHeight: window.outerHeight,\n    outerWidth: window.outerWidth\n  };\n};\n\nconst useWindowSize = () => {\n  let [windowSize, setWindowSize] = useState(getSize());\n\n  const handleResize = () => {\n    setWindowSize(getSize());\n  };\n\n  useEffect(() => {\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return windowSize;\n};\n\nexport default useWindowSize;\nexport { getSize };\n","const socialButtons = [\n  {\n    label: 'Github',\n    link: 'https://github.com/thibaultvigier',\n    color: 'black'\n  },\n  {\n    label: 'LinkedIn',\n    link: ' https://www.linkedin.com/in/thibaultvigier/',\n    color: 'linkedin'\n  }\n];\n\nexport { socialButtons };\n","import React from 'react';\nimport { Button } from 'semantic-ui-react';\nimport { socialButtons } from '../constants/socialButtons';\n\nconst style = { minWidth: '100px' };\n\nconst SocialButton = ({ label, link, color }) => {\n  return (\n    <Button as=\"a\" target=\"new\" href={link} color={color} style={style}>\n      {label}\n    </Button>\n  );\n};\n\nconst SocialButtonGroup = () => {\n  return (\n    <div>\n      {socialButtons.map(button => (\n        <SocialButton key={`social-button-${button.label}`} {...button} />\n      ))}\n    </div>\n  );\n};\n\nexport default SocialButtonGroup;\nexport { SocialButton };\n","import React from 'react';\nimport useWindowSize from '../hooks/useWindowSize';\nimport meBitmoji from '../img/me.png';\nimport { Header, Grid, Segment, Image } from 'semantic-ui-react';\nimport SocialButtonGroup from './SocialButton';\n\nconst minWidth = 400;\nconst minHeight = 640;\n\nconst Home = () => {\n  const { innerHeight, innerWidth } = useWindowSize();\n\n  const width = innerWidth > minWidth ? innerWidth : minWidth;\n  const height = innerHeight > minHeight ? innerHeight : minHeight;\n\n  return (\n    <Grid\n      columns={1}\n      centered\n      verticalAlign=\"middle\"\n      style={{ height, width, minHeight, minWidth }}\n    >\n      <Grid.Column>\n        <Segment basic textAlign=\"center\">\n          <Image\n            src={meBitmoji}\n            alt=\"me as a bitmoji\"\n            circular\n            centered\n            size=\"medium\"\n          />\n          <Header as=\"h1\">\n            Hi, my name is Thibault!\n            <Header.Subheader>\n              Fullstack Engineer - Python / JavaScript\n            </Header.Subheader>\n          </Header>\n          <SocialButtonGroup />\n        </Segment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport Home from './components/Home';\n\nconst App = () => <Home />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}